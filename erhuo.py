"""
    Boson v0.5
    By: ict
    Email: ictxiangxin@gmail.com

    This code generated by boson python code generator.
"""


import re


boson_token_tuple = [
    ("name",          r"[_a-zA-Z][_a-zA-Z0-9\-]*"),
    ("string",        r"\".*?[^\\]\"|\"\""),
    ("assign",        r"="),
    ("brace_l",       r"\{"),
    ("brace_r",       r"\}"),
    ("bracket_l",     r"\("),
    ("bracket_r",     r"\)"),
    ("attr",          r"\:"),
    ("comma",         r"\,"),
    ("semicolon",     r"\;"),
    ("skip",          r"\t|\ "),
    ("newline",       r"\r\n|\n"),
    ("boson_invalid", r"."),
]

boson_ignore = {
    "skip",
}

boson_error = {
    "boson_invalid",
}

boson_token_regular_expression = "|".join("(?P<%s>%s)" % pair for pair in boson_token_tuple)


terminal_index = {
    "literal3": 0,
    "literal4": 1,
    "literal5": 2,
    "literal9": 3,
    "literal7": 4,
    "literal2": 5,
    "literal1": 6,
    "name":     7,
    "string":   8,
    "literal6": 9,
    "literal8": 10,
    "$":        11,
}

action_table = [
    ["e",   "e",   "e",   "e",   "e",   "e",   "s6",  "s2",  "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r15", "r15", "e",   "e",   "e",   "r15"],
    ["s8",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "s9",  "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "s6",  "s2",  "e",   "e",   "e",     "a"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r23", "r23", "e",   "e",   "e",   "r23"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r21", "r21", "e",   "e",   "e",   "r21"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s11", "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r22", "r22", "e",   "e",   "e",   "r22"],
    ["e",   "r5",  "r5",  "e",   "e",   "e",   "e",   "s17", "s14", "e",   "e",     "e"],
    ["e",   "e",   "r12", "e",   "r12", "e",   "e",   "s18", "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r14", "r14", "e",   "e",   "e",   "r14"],
    ["s21", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "s22", "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "r28", "r28", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "r2",  "r2",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "s24", "s23", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "r3",  "r3",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["s8",  "r1",  "r1",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "s25", "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "s26", "e",   "s27", "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "r10", "e",   "r10", "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "r18", "r18", "e",   "e",   "e",   "e",   "s29", "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s32", "s30", "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s17", "s14", "e",   "e",     "e"],
    ["e",   "r20", "r20", "e",   "r20", "e",   "r20", "r20", "e",   "e",   "r20", "r20"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s38", "s37", "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s18", "e",   "e",   "e",     "e"],
    ["e",   "e",   "r31", "e",   "e",   "e",   "e",   "s41", "s40", "e",   "r31",   "e"],
    ["e",   "s47", "s46", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "r17", "r17", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r27", "r27", "e",   "e",   "e",   "r27"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r25", "r25", "e",   "e",   "e",   "r25"],
    ["s8",  "e",   "e",   "e",   "e",   "e",   "r26", "r26", "e",   "s9",  "e",   "r26"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r6",  "r6",  "e",   "e",   "e",    "r6"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "r24", "r24", "e",   "e",   "e",   "r24"],
    ["e",   "r4",  "r4",  "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "r7",  "e",   "r7",  "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "r9",  "e",   "r9",  "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["s8",  "e",   "r8",  "e",   "r8",  "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "r11", "e",   "r11", "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "r35", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r35",   "e"],
    ["s8",  "e",   "r34", "e",   "e",   "e",   "e",   "e",   "e",   "s9",  "r34",   "e"],
    ["e",   "e",   "r30", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r30",   "e"],
    ["e",   "e",   "s48", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "s49",   "e"],
    ["e",   "e",   "r33", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r33",   "e"],
    ["e",   "e",   "r32", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r32",   "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s50", "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "r19", "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "e",   "e",   "e",   "e",   "e",   "s41", "s40", "e",   "e",     "e"],
    ["e",   "e",   "r13", "e",   "e",   "e",   "r13", "r13", "e",   "e",   "r13", "r13"],
    ["e",   "r16", "r16", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "e",     "e"],
    ["e",   "e",   "r29", "e",   "e",   "e",   "e",   "e",   "e",   "e",   "r29",   "e"],
]

non_terminal_index = {
    "arg":          0,
    "arg_list":     1,
    "assign":       2,
    "attr":         3,
    "attr_list":    4,
    "block":        5,
    "code":         6,
    "def_arg_list": 7,
    "func_def":     8,
    "function":     9,
    "line":         10,
    "right_val":    11,
    "sub":          12,
    "sub_line":     13,
}

goto_table = [
    [-1, -1, 5,  -1, -1, 7,  3,  -1, -1, 4,  1,  -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 5,  -1, -1, 7,  -1, -1, -1, 4,  10, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [16, 15, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1],
    [-1, -1, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 34, -1, -1, -1, 31, -1, 33, -1, -1],
    [35, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1],
    [-1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 45, -1, -1, -1, 44, -1, -1, 43, 42],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 45, -1, -1, -1, 44, -1, -1, -1, 51],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
]

reduce_symbol_sum = {
    0:  1,
    1:  1,
    2:  1,
    3:  1,
    4:  3,
    5:  0,
    6:  4,
    7:  3,
    8:  3,
    9:  3,
    10: 1,
    11: 3,
    12: 0,
    13: 6,
    14: 2,
    15: 1,
    16: 3,
    17: 1,
    18: 0,
    19: 4,
    20: 4,
    21: 1,
    22: 1,
    23: 1,
    24: 1,
    25: 1,
    26: 1,
    27: 1,
    28: 1,
    29: 3,
    30: 1,
    31: 0,
    32: 1,
    33: 1,
    34: 1,
    35: 1,
}

reduce_to_non_terminal = {
    0:  "start",
    1:  "arg",
    2:  "arg",
    3:  "arg_list",
    4:  "arg_list",
    5:  "arg_list",
    6:  "assign",
    7:  "attr",
    8:  "attr",
    9:  "attr",
    10: "attr_list",
    11: "attr_list",
    12: "attr_list",
    13: "block",
    14: "code",
    15: "code",
    16: "def_arg_list",
    17: "def_arg_list",
    18: "def_arg_list",
    19: "func_def",
    20: "function",
    21: "line",
    22: "line",
    23: "line",
    24: "right_val",
    25: "right_val",
    26: "right_val",
    27: "right_val",
    28: "arg",
    29: "sub",
    30: "sub",
    31: "sub",
    32: "sub_line",
    33: "sub_line",
    34: "sub_line",
    35: "sub_line",
}

literal_map = {
    ";":   "literal7",
    ",":   "literal5",
    ")":   "literal4",
    "{":   "literal6",
    ":":   "literal9",
    "}":   "literal8",
    "=":   "literal2",
    "let": "literal1",
    "(":   "literal3",
}


def erhuo_lexer(text):
    boson_token_list = []
    line_number = 1
    for one_token in re.finditer(boson_token_regular_expression, text):
        token_class = one_token.lastgroup
        token_text = one_token.group(token_class)
        if token_class in boson_ignore:
            continue
        elif token_class == "newline":
            line_number += 1
        elif token_class in boson_error:
            raise Exception("Invalid token: (%s, \"%s\")" % (token_class, token_text))
        else:
            boson_token_list.append((token_class, token_text, line_number))
    boson_token_list.append(("$", "", line_number))
    return boson_token_list


def erhuo_grammar(token_list):
    function_dict = {}
    block_list = []
    erhuo_stack = []
    line_start_record = {}
    stack = [0]
    token_index = 0
    while token_index < len(token_list):
        token = token_list[token_index]
        if token[1] in literal_map:
            token_type = literal_map[token[1]]
        else:
            token_type = token[0]
        token_line = token[2]
        if token_line not in line_start_record:
            line_start_record[token_line] = token_index
        now_state = stack[-1]
        operation = action_table[now_state][terminal_index[token_type]]
        operation_flag = operation[0]
        if operation_flag == "e":
            error_line = token[2]
            error_code = ""
            offset = 0
            for i in range(line_start_record[error_line], len(token_list)):
                if token_list[i][2] == error_line:
                    error_code += " " + token_list[i][1]
                    if i < token_index:
                        offset += len(token_list[i][1]) + 1
            error_message_head = "\nGrammar error [line %d]:" % error_line
            error_message = error_message_head + error_code + "\n"
            error_message += " " * (len(error_message_head) + offset) + "^" * len(token[1])
            raise Exception(error_message)
        elif operation_flag == "s":
            operation_number = int(operation[1:])
            stack.append(operation_number)
            token_index += 1
            erhuo_stack.append(token)
        elif operation_flag == "r":
            operation_number = int(operation[1:])
            reduce_sum = reduce_symbol_sum[operation_number]
            for _ in range(reduce_sum):
                stack.pop()
            now_state = stack[-1]
            now_non_terminal_index = non_terminal_index[reduce_to_non_terminal[operation_number]]
            goto_next_state = goto_table[now_state][now_non_terminal_index]
            if goto_next_state == -1:
                raise Exception("Invalid goto action: state=%d, non-terminal=%d" % (now_state, now_non_terminal_index))
            stack.append(goto_table[now_state][now_non_terminal_index])
            if operation_number == 0:
                # start -> code
                pass
            elif operation_number == 1:
                # arg -> name
                pass
            elif operation_number == 2:
                # arg -> string
                pass
            elif operation_number == 3:
                # arg_list -> arg
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = [boson_sentence[0]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 4:
                # arg_list -> arg_list , arg
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = boson_sentence[0] + [boson_sentence[2]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 5:
                # arg_list -> ~
                boson_sentence = []
                for boson_i in range(0):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = None
                erhuo_stack.append(boson_reduce)
            elif operation_number == 6:
                # assign -> let func_def = right_val
                boson_sentence = []
                for boson_i in range(4):
                    boson_sentence.insert(0, erhuo_stack.pop())
                function_dict[boson_sentence[1][0][1]] = (boson_sentence[1][1], boson_sentence[3])
            elif operation_number == 7:
                # attr -> name : function
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = (boson_sentence[0], boson_sentence[2])
                erhuo_stack.append(boson_reduce)
            elif operation_number == 8:
                # attr -> name : name
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = (boson_sentence[0], boson_sentence[2])
                erhuo_stack.append(boson_reduce)
            elif operation_number == 9:
                # attr -> name : string
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = (boson_sentence[0], boson_sentence[2])
                erhuo_stack.append(boson_reduce)
            elif operation_number == 10:
                # attr_list -> attr
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = [boson_sentence[0]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 11:
                # attr_list -> attr_list , attr
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = boson_sentence[0] + [boson_sentence[2]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 12:
                # attr_list -> ~
                boson_sentence = []
                for boson_i in range(0):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = None
                erhuo_stack.append(boson_reduce)
            elif operation_number == 13:
                # block -> name { attr_list ; sub }
                boson_sentence = []
                for boson_i in range(6):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = ("block", boson_sentence[0], boson_sentence[2], boson_sentence[4])
                erhuo_stack.append(boson_reduce)
            elif operation_number == 14:
                # code -> code line
                pass
            elif operation_number == 15:
                # code -> line
                pass
            elif operation_number == 16:
                # def_arg_list -> def_arg_list , name
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = boson_sentence[0] + [boson_sentence[2]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 17:
                # def_arg_list -> name
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = [boson_sentence[0]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 18:
                # def_arg_list -> ~
                boson_sentence = []
                for boson_i in range(0):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = None
                erhuo_stack.append(boson_reduce)
            elif operation_number == 19:
                # func_def -> name ( def_arg_list )
                boson_sentence = []
                for boson_i in range(4):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = (boson_sentence[0], boson_sentence[2])
                erhuo_stack.append(boson_reduce)
            elif operation_number == 20:
                # function -> name ( arg_list )
                boson_sentence = []
                for boson_i in range(4):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = ("function", boson_sentence[0], boson_sentence[2])
                erhuo_stack.append(boson_reduce)
            elif operation_number == 21:
                # line -> assign
                pass
            elif operation_number == 22:
                # line -> block
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, erhuo_stack.pop())
                block_list.append(boson_sentence[0])
            elif operation_number == 23:
                # line -> function
                pass
            elif operation_number == 24:
                # right_val -> block
                pass
            elif operation_number == 25:
                # right_val -> function
                pass
            elif operation_number == 26:
                # right_val -> name
                pass
            elif operation_number == 27:
                # right_val -> string
                pass
            elif operation_number == 28:
                # arg -> function
                pass
            elif operation_number == 29:
                # sub -> sub , sub_line
                boson_sentence = []
                for boson_i in range(3):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = boson_sentence[0] + [boson_sentence[2]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 30:
                # sub -> sub_line
                boson_sentence = []
                for boson_i in range(1):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = [boson_sentence[0]]
                erhuo_stack.append(boson_reduce)
            elif operation_number == 31:
                # sub -> ~
                boson_sentence = []
                for boson_i in range(0):
                    boson_sentence.insert(0, erhuo_stack.pop())
                boson_reduce = None
                erhuo_stack.append(boson_reduce)
            elif operation_number == 32:
                # sub_line -> block
                pass
            elif operation_number == 33:
                # sub_line -> function
                pass
            elif operation_number == 34:
                # sub_line -> name
                pass
            elif operation_number == 35:
                # sub_line -> string
                pass
            else:
                raise Exception("Invalid reduce number: %d" % operation_number)
        elif operation_flag == "a":
            break
        else:
            raise Exception("Invalid action: %s" % operation)
    return block_list, function_dict


indent_str = "    "
no_reverse = ["link", "input", "meta", "img"]


def gen_code(item, func_dict, arg_dict, disable_type, indent):
    if "string" not in disable_type and item[0] == "string":
        output.write(item[1][1:-1])
        multi = False
    elif "block" not in disable_type and item[0] == 'block':
        output.write("\n")
        gen_block(item, func_dict, arg_dict, indent + 1)
        multi = True
    elif "function" not in disable_type and item[0] == "function":
         multi = gen_function(item, func_dict, arg_dict, indent)
    elif "name" not in disable_type and item[0] == "name":
         multi = gen_code(arg_dict[item[1]], func_dict, arg_dict, [], indent)
    return multi


def gen_block(block, func_dict, arg_dict, indent):
    output.write(indent_str * indent + "<" + block[1][1])
    if block[2] is not None:
        for attr in block[2]:
            output.write(" " + attr[0][1] + "=\"")
            gen_code(attr[1], func_dict, arg_dict, ["block"], indent)
            output.write("\"")
    output.write(">")
    multi = False
    if block[3] is not None:
        for sub in block[3]:
             multi += gen_code(sub, func_dict, arg_dict, [], indent)
        if len(block[3]) > 1 or multi:
            output.write("\n" + indent_str * indent)
    if block[1][1] not in no_reverse:
        output.write("</%s>" % block[1][1])


def gen_function(function, func_dict, arg_dict, indent):
    arg_list, func_body = func_dict[function[1][1]]
    if arg_list is not None:
        real_arg_list = function[2]
        for i in range(len(arg_list)):
            arg_dict[arg_list[i][1]] = real_arg_list[i]
    return gen_code(func_body, func_dict, arg_dict, [], indent)

import sys
output = sys.stdout

if __name__ == "__main__":
    if len(sys.argv) in [2, 3]:
        if len(sys.argv) == 3:
            output = open(sys.argv[2], "w", encoding="utf-8")
        with open(sys.argv[1], "r", encoding="utf-8") as fp:
            s = fp.read()
            bl, fd = erhuo_grammar(erhuo_lexer(s))
            for b in bl:
                gen_block(b, fd, {}, 0)
                output.write("\n")
        if output != sys.stdout:
            output.close()
    else:
        print("Usage: %s <source_file> <html_file>" % sys.argv[0])
        exit(0)
